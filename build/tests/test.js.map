{"version":3,"sources":["../../app/tests/test.js"],"names":["chai","use","chaiHttp","should","token","describe","it","done","request","app","post","send","firstname","lastname","othername","email","phoneNumber","username","password","end","err","res","have","status"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEAA,eAAKC,GAAL,CAASC,kBAAT;;mBAEmBF,eAAKG,MAAL,E;IAAXA,M,gBAAAA,M;;AAER;;;AACA,IAAIC,QAAQ,EAAZ;;AAEA;AACAC,SAAS,YAAT,EAAuB,YAAM;AAC3BC,KAAG,uCAAH,EAA4C,UAACC,IAAD,EAAU;AACpDP,mBAAKQ,OAAL,CAAaC,aAAb,EACGC,IADH,CACQ,qBADR,EAEGC,IAFH,CAEQ;AACJC,iBAAW,SADP;AAEJC,gBAAU,UAFN;AAGJC,iBAAW,UAHP;AAIJC,aAAO,kBAJH;AAKJC,mBAAa,gBALT;AAMJC,gBAAU,cANN;AAOJC,gBAAU;AAPN,KAFR,EAWGC,GAXH,CAWO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjBA,UAAIlB,MAAJ,CAAWmB,IAAX,CAAgBC,MAAhB,CAAuB,GAAvB;AACAhB;AACD,KAdH;AAeD,GAhBD;AAiBD,CAlBD;;AAofile":"test.js","sourcesContent":["import chai from 'chai';\nimport chaiHttp from 'chai-http';\nimport app from '../app';\nimport helper from '../helper/helper';\n\nchai.use(chaiHttp);\n\nconst { should } = chai.should();\n\n// Get token\nlet token = [];\n\n// Test for signup\ndescribe('POST /User', () => {\n  it('should signup a new user successfully', (done) => {\n    chai.request(app)\n      .post('/api/v1/auth/signup')\n      .send({\n        firstname: 'Senator',\n        lastname: 'Governor',\n        othername: 'Chairman',\n        email: 'govern@gmail.com',\n        phoneNumber: '+2348034567890',\n        username: 'presidential',\n        password: 'represent@t1v3'\n      })\n      .end((err, res) => {\n        res.should.have.status(201);\n        done();\n      });\n  });\n});\n\n// Test for Redflags Route\n// describe('POST /Redflags', () => {\n//     it('should add a new redflag record', (done) => {\n//       chai.request(app)\n//         .post('/api/v1/record/red-flags')\n//         .send({\n//           title: 'title',\n//           type: 'Redflag',\n//           location: 'Surulere, Lagos',\n//           status: 'Draft',\n//           images: 'image.jpeg',\n//           videos: 'youtube.com/lootedfund',\n//           comment: 'New comment'\n//         })\n//         .end((err, res) => {\n//           res.should.have.status(201);\n//           res.should.be.json;\n//           res.body.should.be.a('object');\n//           res.body.should.have.property('title').equal('title');\n//           res.body.should.have.property('comment).equal('New comment');\n//           res.body.should.have.property('message').equal('Redflag record created');\n//           done();\n//         });\n//     }); \n\n//     it('should return error when any of the field is empty', (done) => {\n//       chai.request(app)\n//       .post('/api/v1/record/red-flags')\n//       .send({\n//         title: ' ',\n//         type: 'Redflag',\n//         location: 'Surulere, Lagos',\n//         status: 'Draft',\n//         images: 'image.jpeg',\n//         videos: 'youtube.com/lootedfund',\n//         comment: 'New comment'\n//       })\n//         .end((err, res) => {\n//           res.should.have.status(400);\n//           res.should.be.json;\n//           res.body.should.be.a('object');\n//           res.body.should.have.property('error').equal('Title field cannot be empty');\n//           done();\n//         });\n//     });\n\n//     it('should return error when type is not redflag', (done) => {\n//       chai.request(app)\n//       .post('/api/v1/record/red-flags')\n//       .send({\n//         title: 'title',\n//         type: 'no_type',\n//         location: 'Surulere, Lagos',\n//         status: 'Draft',\n//         images: 'image.jpeg',\n//         videos: 'youtube.com/lootedfund',\n//         comment: 'New comment'\n//       })\n//         .end((err, res) => {\n//           res.should.have.status(400);\n//           res.should.be.json;\n//           res.body.should.be.a('object');\n//           res.body.should.have.property('error').equal('Select a valid record type');\n//           done();\n//         });\n//     });\n//   });\n\n// describe('GET/ Redflags', () => {\n//   it('should GET all redflags records', (done) => {\n//       chai.request(app)\n//         .get('/api/v1/record/red-flags')\n//         .end((err, res) => {\n//           res.should.have.status(200);\n//           res.should.be.json;\n//           res.body.should.be.a('object');\n//           res.body.should.have.property('message').equal('Redflags records retrieved');\n//           done();\n//         });\n//     });\n//   });\n\n//   describe('GET /Redflags /:id', () => {\n//     it('should GET a redflag record by its id', (done) => {\n//       chai.request(app)\n//           .get('/api/v1/record/red-flags/1')\n//           .end((err, res) => {\n//             res.should.have.status(200);\n//             res.body.should.be.a('object');\n//             res.body.should.have.property('records');\n//             res.body.should.have.property('message').equal('Redflag record retrieved');\n//             done();\n//           });\n//       });\n\n//       it('returns status 404 when id is not found', (done) => {\n//         const records = {\n//           id: 'Not present'\n//         }\n//         chai.request(app)\n//           .get('/api/v1/record/red-flags' + records.id)\n//           .end((err, res) => {\n//           res.should.have.status(404);\n//           done();\n//         });\n//       });\n//   });\n\n//   describe('PATCH /Redflag/', () => {\n//     it('should update location of a redflag record', (done) => {\n//      chai.request(app)\n//         .get('/api/v1/record/red-flags')\n//         .end((err, res) => {\n//           chai.request(app)\n//             .patch(`/api/v1/record/red-flags/1/location`)\n//             .send({'location': 'long -92, lat 113'})\n//             .end((err, res) => {\n//               res.should.have.status(201);\n//               res.should.be.json;\n//               res.body.should.be.a('object');\n//               res.body.should.have.property('message');\n//               res.body.message.should.equal('Redflag location successfully updated!');\n//               done();\n//             });\n//         });\n//     });\n\n//     it('should update comment of a redflag record', (done) => {\n//       chai.request(app)\n//         .get('/api/v1/record/red-flags')\n//         .end((err, res) => {\n//           chai.request(app)\n//             .patch(`/api/v1/record/red-flags/1/comment`)\n//             .send({'comment': 'my comment'})\n//             .end((err, res) => {\n//               res.should.have.status(201);\n//               res.body.should.be.a('object');\n//               res.body.should.have.property('message');\n//               res.body.message.should.equal('Redflag comment updated successfully!');\n//               done();\n//             });\n//         });\n//     });\n\n//     it('should return error when location field is empty', (done) => {\n//       chai.request(app)\n//       .get('/api/v1/record/red-flags')\n//         .end((err, res) => {\n//           chai.request(app)\n//             .patch('/api/v1/record/red-flags/1/location')\n//             .send({' ': ' ' })\n//             .end((err, res) => {\n//               res.should.have.status(400);\n//               res.body.should.have.property('error').equal('location field is required');\n//               done();\n//             });\n//         });\n\n//     });\n\n//     it('should return error when comment field is empty', (done) => {\n//       chai.request(app)\n//       .get('/api/v1/record/red-flags')\n//         .end((err, res) => {\n//           chai.request(app)\n//             .patch('/api/v1/record/red-flags/1/comment')\n//             .send({' ': ' '})\n//             .end((err, res) => {\n//               res.should.have.status(400);\n//               res.body.should.have.property('error').equal('This field is required');\n//               done();\n//             });\n//         });\n//     });\n//   });\n\n//   describe('DELETE /Redflag', () => {\n//     it('shoud delete redflag record from the database', (done) => {\n//       chai.request(app)\n//       .get('/api/v1/record/red-flags')\n//       .end((err, res) => {\n//         chai.request(app)\n//           .delete(`/api/v1/record/red-flags/1`)\n//           .end((err, res) => {\n//             res.should.have.status(200);\n//             res.should.be.json;\n//             res.body.should.have.property('message').equal('Redflag record deleted successfully');\n//             done(err);\n//           });\n//       });\n//     });\n\n//     it('should return an error if the id is not found', (done) => {\n//       chai.request(app)\n//         .post('/api/v1/record/red-flags')\n//         .end((err, res) => {\n//           chai.request(app)\n//           .delete('/api/v1/record/red-flags/7878')\n//           .end((err, res) => {\n//             res.should.have.status(404);\n//             res.body.should.have.property('message').equal('Redflag record not found');\n//             done();\n//           });\n//         });\n//     });\n//   });\n\n//   // Test for Intervention route\n//   describe('POST /Intervention', () => {\n//     it('should add a new intervention record', (done) => {\n//       chai.request(app)\n//         .post('/api/v1/record/intervention')\n//         .send({\n//           'createdOn': '2018-12-12',\n//           'title': 'title',\n//           'createdBy': '1',\n//           'type': 'Intervention',\n//           'location': 'long -102, lat 111',\n//           'images': 'image.jpeg',\n//           'videos': 'youtube.com/lootedfund',\n//           'comment': 'New comment'\n//         })\n//         .end((err, res) => {\n//           res.should.have.status(201);\n//           res.should.be.json;\n//           res.body.should.be.a('object');\n//           res.body.should.have.property('records');\n//           res.body.should.have.property('message');\n//           res.body.message.should.equal('Intervention record created')\n//           done();\n//         });\n//     }); \n\n//     it('should return error when any of the field is empty', (done) => {\n//       chai.request(app)\n//       .post('/api/v1/record/intervention')\n//         .send({\n//           ' ': ' '\n//         })\n//         .end((err, res) => {\n//           res.should.have.status(400);\n//           res.should.be.json;\n//           res.body.should.have.property('error').equal('All fields are required!');\n//           done();\n//         });\n//     });\n//   });\n\n// describe('GET/ Interventions', () => {\n//   it('should GET all interventions records', (done) => {\n//       chai.request(app)\n//         .get('/api/v1/record/intervention')\n//         .end((err, res) => {\n//           res.should.have.status(200);\n//           res.should.be.json;\n//           res.body.should.be.a('object');\n//           res.body.should.have.property('message').equal('Intervention records retrieved');\n//         done();\n//         });\n//     });\n//   });\n\n//   describe('GET /Interventions /:id', () => {\n//     it('should GET an intervention record by its id', (done) => {\n//       chai.request(app)\n//           .get('/api/v1/record/intervention/1')\n//           .end((err, res) => {\n//             res.should.have.status(200);\n//             res.body.should.be.a('object');\n//             res.body.should.have.property('records');\n//             res.body.should.have.property('message').equal('Intervention record retrieved');\n//             done();\n//           });\n//       });\n\n//       it('returns status 404 when id is not found', (done) => {\n//         const records = {\n//           id: 'Not present'\n//         }\n//         chai.request(app)\n//           .get('/api/v1/record/intervention' + records.id)\n//           .end((err, res) => {\n//           res.should.have.status(404);\n//           done();\n//         });\n//       });\n//   });\n\n//   describe('PATCH /Intervention/', () => {\n//     it('should update location of a intervention record', (done) => {\n//      chai.request(app)\n//         .get('/api/v1/record/intervention')\n//         .end((err, res) => {\n//           chai.request(app)\n//             .patch(`/api/v1/record/intervention/1/location`)\n//             .send({'location': 'long -92, lat 113'})\n//             .end((err, res) => {\n//               res.should.have.status(201);\n//               res.should.be.json;\n//               res.body.should.be.a('object');\n//               res.body.should.have.property('message');\n//               res.body.message.should.equal('Intervention location successfully updated!');\n//               done();\n//             });\n//         });\n//     });\n\n//     it('should update comment of an intervention record', (done) => {\n//       chai.request(app)\n//         .get('/api/v1/record/intervention')\n//         .end((err, res) => {\n//           chai.request(app)\n//             .patch(`/api/v1/record/intervention/1/comment`)\n//             .send({'comment': 'my comment'})\n//             .end((err, res) => {\n//               res.should.have.status(201);\n//               res.body.should.be.a('object');\n//               res.body.should.have.property('message');\n//               res.body.message.should.equal('Intervention comment updated successfully!');\n//               done();\n//             });\n//         });\n//     });\n\n//     it('should return error when location field is empty', (done) => {\n//       chai.request(app)\n//       .get('/api/v1/record/intervention')\n//         .end((err, res) => {\n//           chai.request(app)\n//             .patch('/api/v1/record/intervention/1/location')\n//             .send({' ': ' ' })\n//             .end((err, res) => {\n//               res.should.have.status(400);\n//               res.body.should.have.property('error').equal('location field is required');\n//               done();\n//             });\n//         });\n\n//     });\n\n//     it('should return error when comment field is empty', (done) => {\n//       chai.request(app)\n//       .get('/api/v1/record/intervention')\n//         .end((err, res) => {\n//           chai.request(app)\n//             .patch('/api/v1/record/intervention/1/comment')\n//             .send({' ': ' '})\n//             .end((err, res) => {\n//               res.should.have.status(400);\n//               res.body.should.have.property('error').equal('This field is required');\n//               done();\n//             });\n//         });\n//     });\n//   });\n\n//   describe('DELETE /Intervention', () => {\n//     it('shoud delete intervention record from the database', (done) => {\n//       chai.request(app)\n//       .get('/api/v1/record/intervention')\n//       .end((err, res) => {\n//         chai.request(app)\n//           .delete('/api/v1/record/intervention/1')\n//           .end((err, res) => {\n//             res.should.have.status(200);\n//             res.should.be.json;\n//             res.body.should.have.property('message').equal('Intervention record deleted successfully');\n//             done();\n//           });\n//       });\n//     });\n\n//     it('should return an error if the id is not found', (done) => {\n//       chai.request(app)\n//         .post('/api/v1/record/intervention')\n//         .end((err, res) => {\n//           chai.request(app)\n//           .delete('/api/v1/record/intervention/7878')\n//           .end((err, res) => {\n//             res.should.have.status(404);\n//             res.body.should.have.property('message').equal('Intervention record not found');\n//             done();\n//           });\n//         });\n//     });\n//   });"]}