{"version":3,"sources":["../../app/middleware/Auth.js"],"names":["dotenv","config","SECRET","process","env","Auth","verifyToken","req","res","next","token","headers","status","json","error","decoded","jwt","verify","text","dBase","query","userId","rows","user","id"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEAA,iBAAOC,MAAP;AACA,IAAMC,SAASC,QAAQC,GAAR,CAAYF,MAA3B;;AAEA,IAAMG,OAAO;AACLC,aADK,6BACOC,GADP,EACYC,GADZ,EACiBC,IADjB,EACuB;AAChC,QAAMC,QAAQH,IAAII,OAAJ,CAAY,gBAAZ,CAAd;AACA,QAAI,CAACD,KAAL,EAAY;AACV,aAAOF,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,OAAO,uBAAT,EAArB,CAAP;AACD;AACD,QAAI;AACF,UAAMC,UAAU,MAAMC,uBAAIC,MAAJ,CAAWP,KAAX,EAAkBR,MAAlB,CAAtB;AACA,UAAMgB,OAAO,mCAAb;;AAFE,iBAGe,MAAMC,gBAAMC,KAAN,CAAYF,IAAZ,EAAkB,CAACH,QAAQM,MAAT,CAAlB,CAHrB;AAAA,UAGMC,IAHN,QAGMA,IAHN;;AAIF,UAAI,CAACA,KAAK,CAAL,CAAL,EAAc;AACZ,eAAOd,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,OAAO,mCAAT,EAArB,CAAP;AACD;AACDP,UAAIgB,IAAJ,GAAW,EAAEC,IAAIT,QAAQM,MAAd,EAAX;AACAZ;AACD,KATD,CAUA,OAAOK,KAAP,EAAc;AACZ,aAAON,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBC,KAArB,CAAP;AACD;AACF;AAnBU,CAAb;;kBAsBeT,I","file":"Auth.js","sourcesContent":["import jwt from 'jsonwebtoken';\r\nimport dBase from '../models/query';\r\nimport dotenv from 'dotenv';\r\n\r\ndotenv.config();\r\nconst SECRET = process.env.SECRET;\r\n\r\nconst Auth = {\r\n  async verifyToken(req, res, next) {\r\n    const token = req.headers['x-access-token'];\r\n    if (!token) {\r\n      return res.status(400).json({ error: 'Token is not provided' });\r\n    }\r\n    try {\r\n      const decoded = await jwt.verify(token, SECRET);\r\n      const text = 'SELECT * FROM users WHERE id = $1';\r\n      const { rows } = await dBase.query(text, [decoded.userId]);\r\n      if (!rows[0]) {\r\n        return res.status(400).json({ error: 'The token you provided is invalid' });\r\n      }\r\n      req.user = { id: decoded.userId };\r\n      next();\r\n    }\r\n    catch (error) {\r\n      return res.status(400).json(error);\r\n    }\r\n  },\r\n};\r\n\r\nexport default Auth;\r\n"]}