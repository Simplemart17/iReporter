{"version":3,"sources":["../../app/controllers/users.js"],"names":["Users","createUser","req","res","hashPassword","body","password","createQuery","values","firstname","lastname","othername","email","phoneNumber","username","isAdmin","dBase","query","rows","token","id","status","json","message","error","constraint","signin","text","getUsers","findAllUsers","rowCount","records","Total"],"mappings":"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","file":"users.js","sourcesContent":["import dBase from '../models/query';\r\nimport { generateToken, generateHashPassword, comparePassword } from '../Helper/Helper';\r\n\r\nconst Users = {\r\n  async createUser(req, res) {\r\n    const hashPassword = generateHashPassword(req.body.password);\r\n\r\n    const createQuery = `INSERT INTO users(firstname, lastname, othername, email, phoneNumber, username, password, isAdmin)\r\n    VALUES($1, $2, $3, $4, $5, $6, $7, $8) returning *`;\r\n    const values = [\r\n      req.body.firstname,\r\n      req.body.lastname,\r\n      req.body.othername,\r\n      req.body.email,\r\n      req.body.phoneNumber,\r\n      req.body.username,\r\n      hashPassword,\r\n      req.body.isAdmin || 'false'\r\n    ];\r\n    try {\r\n      const { rows } = await dBase.query(createQuery, values);\r\n      const token = generateToken(rows[0].id);\r\n      return res.status(201).json({\r\n        message: 'You have successfully registered!',\r\n        token: token\r\n      });\r\n    } catch(error) {\r\n      // console.log(error);\r\n      if (error.constraint === 'users_email_key') {\r\n        return res.status(400).json({ error: 'Email already exist!' })\r\n      } else if (error.constraint === 'users_username_key') {\r\n        return res.status(400).json({ error: 'Username already exist!' })\r\n      }\r\n      return res.json(error);\r\n    }\r\n  },\r\n\r\n  async signin(req, res) {\r\n    const text = 'SELECT * FROM users WHERE email = $1';\r\n    try {\r\n      const { rows } = await dBase.query(text, [req.body.email]);\r\n      if (!rows[0]) {\r\n        return res.status(400).json({ error: 'Incorrect email address' });\r\n      }\r\n      if (!comparePassword(rows[0].password, req.body.password)) {\r\n        return res.status(400).json({ error: 'Incorrect password' });\r\n      }\r\n      const token = generateToken(rows[0].id);\r\n      return res.status(200).json({\r\n        message: 'You have successfully signed in!',\r\n        token: token\r\n      });\r\n    } catch(error) {\r\n      // console.log(error)\r\n      return res.json(error);\r\n    }\r\n  },\r\n\r\n  async getUsers(req, res) {\r\n    const findAllUsers = `SELECT * FROM users`;\r\n    try {\r\n      const { rows, rowCount } = await dBase.query(findAllUsers);\r\n      if (!rows[0]) {\r\n        return res.status(404).json({\r\n          error: 'No user found!',\r\n        });\r\n      }\r\n      return res.status(200).json({\r\n        message: 'Users list retrieved',\r\n        records: rows,\r\n        Total: rowCount });\r\n    } catch (error) {\r\n      // console.log(error);\r\n      return res.json(error);\r\n    }\r\n  },\r\n}\r\n\r\nexport default Users;"]}