{"version":3,"sources":["../../app/controllers/red_flags.js"],"names":["RedflagController","req","res","status","json","message","data","dbase","id","parseInt","params","map","error","body","title","type","location","comment","length","push","foundDbase","itemIndex","index","newData","splice","redFlags"],"mappings":"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","file":"red_flags.js","sourcesContent":["import dbase from \"../dataStructure/dbase\";\r\n\r\nclass RedflagController {\r\n  getAllRedflags(req, res) {\r\n    return res.status(200).json({ message: \"red-flags retrieved successfully\",\r\n      status: 200,\r\n      data: dbase,\r\n    })\r\n  }\r\n  \r\n  getRedflag (req, res) {\r\n    const id = parseInt(req.params.id, 10);\r\n    dbase.map((data) => {\r\n      if (data.id === id) {\r\n        return res.status(200).json ({ message: \"Red-flag record retrieved successfully\",\r\n          status: 200,\r\n          data,\r\n        });\r\n      }\r\n    });\r\n    return res.status(404).json({ error: \"The red-flag record does not exist\",\r\n      status: 404,    \r\n    });\r\n  }\r\n  \r\n  createRedflag (req, res) {\r\n    if (!req.body.title) {\r\n      return res.status(422).json({ error: \"All fields are required!\",\r\n        status: 422,      \r\n      });\r\n    } else if (!req.body.type) {\r\n      return res.status(422).json({ error: \"All fields are required!\",\r\n        status: 422,      \r\n      });\r\n    } else if (!req.body.location) {\r\n      return res.status(422).json({ error: \"All fields are required!\",\r\n        status: 422,      \r\n      });\r\n    } else if (!req.body.comment) {\r\n      return res.status(422).json({ error: \"All fields are required!\",\r\n        status: 422,      \r\n      });\r\n    } else {\r\n    const data = {\r\n      id: dbase.length + 1,\r\n      title: req.body.title,\r\n      type: req.body.type,\r\n      location: req.body.location,\r\n      comment: req.body.comment,\r\n      };\r\n      dbase.push(data);\r\n      return res.status(201).json({ message: \"The red-flag record added successfully\",\r\n      status: 201,\r\n      data,\r\n      });\r\n    }    \r\n  }\r\n  \r\n  updateRedflag (req, res) {\r\n    const id = parseInt(req.params.id, 10);\r\n    let foundDbase;\r\n    let itemIndex;\r\n    dbase.map((data, index) => {\r\n      if (data.id === id) {\r\n        foundDbase = data;\r\n        itemIndex = index;\r\n      }\r\n    });\r\n  \r\n    if (!foundDbase) {\r\n      return res.status(404).json({ error: \"The record is not found!\",\r\n        status: 404,\r\n      });\r\n    }\r\n  \r\n    if (!req.body.location) {\r\n      return res.status(400).json({\r\n        error: \"location is required\",\r\n        status: 400,\r\n      });\r\n    } else if (!req.body.comment) {\r\n      return res.status(400).json({\r\n        error: \"comment is required\",\r\n        status: 400,\r\n      });\r\n    } else {\r\n      const newData = {\r\n      id: foundDbase.id,\r\n      location: req.body.location || foundDbase.location,\r\n      comment: req.body.comment || foundDbase.comment,\r\n      };\r\n  \r\n      dbase.splice(itemIndex, 1, newData);\r\n  \r\n      return res.status(201).json({\r\n      message: \"Red-flag record was updated successfully\",\r\n      status: 201,\r\n      newData,\r\n      });\r\n    }    \r\n  }\r\n  \r\n  deleteRedflag (req, res) {\r\n    const id = parseInt(req.params.id, 10);\r\n    let foundDbase;\r\n    let itemIndex;\r\n    dbase.map((data, index) => {\r\n      if (data.id === id) {\r\n        foundDbase = data;\r\n        itemIndex = index;\r\n      }\r\n    });\r\n  \r\n    if (!foundDbase) {\r\n      return res.status(404).json({\r\n        error: \"The record is not found!\",\r\n        status: 404,\r\n      });\r\n    }\r\n    dbase.splice(itemIndex, 1);\r\n  \r\n    return res.status(200).json({\r\n      message: \"The record deleted successfully\",\r\n      status: 200,\r\n    });\r\n  }\r\n}\r\n\r\nconst redFlags = new RedflagController();\r\nexport default redFlags"]}