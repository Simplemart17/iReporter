{"version":3,"sources":["../../app/controllers/red_flags.js"],"names":["RedFlags","createRedflag","req","res","text","values","body","title","createdBy","type","location","status","Images","Videos","comment","dBase","query","rows","send","message","records","error","getAllRedflags","findAllQuery","rowCount","Total","getRedflag","params","id","updateRedflagComment","findOneQuery","updateOneQuery","response","updateRedflagLocation","deleteRedflag","deleteQuery"],"mappings":"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","file":"red_flags.js","sourcesContent":["import uuidv4 from 'uuid/v4';\nimport dBase from '../models/query';\n\nconst RedFlags = {\n  async createRedflag(req, res) {\n    const text = `INSERT INTO\n    records (id, title, createdBy, type, location, status, Images, Videos, comment)\n    VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9)\n    returning *`;\n    const values = [\n      uuidv4(),\n      req.body.title,\n      req.body.createdBy,\n      req.body.type,\n      req.body.location,\n      req.body.status,\n      req.body.Images,\n      req.body.Videos,\n      req.body.comment,\n    ];\n    try {\n      const { rows } = await dBase.query(text, values);\n      return res.status(201).send({\n        message: 'Redflag record created',\n        records: rows[0] });\n    } catch (error) {\n      // console.log(error);\n      return res.send(error);\n    }\n  },\n\n  async getAllRedflags(req, res) {\n    const findAllQuery = `SELECT * FROM records WHERE records.type = 'Redflag'`;\n    try {\n      const { rows, rowCount } = await dBase.query(findAllQuery);\n      return res.status(200).send({\n        message: 'Redflags records retrieved',\n        records: rows,\n        Total: rowCount });\n    } catch (error) {\n      // console.log(error);\n      return res.send(error);\n    }\n  },\n\n  async getRedflag(req, res) {\n    const text = 'SELECT * FROM records WHERE id = $1';\n    try {\n      const { rows } = await dBase.query(text, [req.params.id]);\n      if (!rows[0]) {\n        return res.status(404).send({ message: 'Redflag record not found' });\n      }\n      return res.status(200).send({\n        message: 'Redflag record retrieved',\n        records: rows[0] });\n    } catch (error) {\n      return res.send(error);\n    }\n  },\n\n  async updateRedflagComment(req, res) {\n    const findOneQuery = 'SELECT * FROM records WHERE id = $1';\n    const updateOneQuery = `UPDATE records\n    SET comment = $1\n    WHERE id = $2 returning *`;\n    try {\n      const { rows } = await dBase.query(findOneQuery, [req.params.id]);\n      if (!rows[0]) {\n        return res.status(404).send({ message: 'Redflag record not found' });\n      }\n      const values = [\n        req.body.comment || rows[0].comment,\n        req.params.id,\n      ];\n      const response = await dBase.query(updateOneQuery, values);\n      return res.status(200).send({\n        message: 'Redflag comment updated successfully!',\n        records: response.rows[0] });\n    } catch (error) {\n      return res.send(error);\n    }\n  },\n\n  async updateRedflagLocation(req, res) {\n    const findOneQuery = 'SELECT * FROM records WHERE id = $1';\n    const updateOneQuery = `UPDATE records\n    SET location = $1\n    WHERE id = $2 returning *`;\n    try {\n      const { rows } = await dBase.query(findOneQuery, [req.params.id]);\n      if (!rows[0]) {\n        return res.status(404).send({ message: 'Redflag record not found' });\n      }\n      const values = [\n        req.body.location || rows[0].location,\n        req.params.id,\n      ];\n      const response = await dBase.query(updateOneQuery, values);\n      return res.status(200).send({\n        message: 'Redflag location successfully updated!',\n        records: response.rows[0] });\n    } catch (error) {\n      return res.send(error);\n    }\n  },\n\n  async deleteRedflag(req, res) {\n    const deleteQuery = 'DELETE FROM records WHERE id = $1 returning *';\n    try {\n      const { rows } = await dBase.query(deleteQuery, [req.params.id]);\n      if (!rows[0]) {\n        return res.status(404).send({ message: 'Redflag record not found' });\n      }\n      return res.status(200).send({ message: 'Redflag record deleted successfully' });\n    } catch (error) {\n      return res.send(error);\n    }\n  },\n};\n\nexport default RedFlags;\n"]}