{"version":3,"sources":["../../app/controllers/red_flags.js"],"names":["RedFlags","createRedflag","req","res","text","values","body","title","user","id","type","location","images","videos","comment","status","json","error","dBase","query","rows","message","records","getAllRedflags","findAllQuery","rowCount","Total","getRedflag","params","updateRedflagComment","findOneQuery","updateOneQuery","response","updateRedflagLocation","deleteRedflag","deleteQuery"],"mappings":"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","file":"red_flags.js","sourcesContent":["import dBase from '../models/query';\r\n\r\nconst RedFlags = {\r\n  async createRedflag(req, res) {\r\n    const text = `INSERT INTO\r\n    records (title, createdBy, type, location, status, images, videos, comment)\r\n    VALUES($1, $2, $3, $4, $5, $6, $7, $8)\r\n    returning *`;\r\n    const values = [\r\n      req.body.title,\r\n      req.user.id,\r\n      req.body.type,\r\n      req.body.location,\r\n      'Draft',\r\n      req.body.images,\r\n      req.body.videos,\r\n      req.body.comment\r\n    ];\r\n    try {\r\n      if (req.body.type !== 'Redflag') {\r\n        return res.status(400).json({error: 'Select a valid record type'})\r\n      }\r\n      const { rows } = await dBase.query(text, values);\r\n      return res.status(201).json({\r\n        message: 'Redflag record created',\r\n        records: rows[0] });\r\n    } catch (error) {\r\n      // console.log(error);\r\n      return res.json(error);\r\n    }\r\n  },\r\n\r\n  async getAllRedflags(req, res) {\r\n    const findAllQuery = `SELECT * FROM records WHERE records.type = 'Redflag'`;\r\n    try {\r\n      const { rows, rowCount } = await dBase.query(findAllQuery);\r\n      if (!rows[0]) {\r\n        return res.status(404).json({\r\n          message: 'No redflag record found'\r\n        });\r\n      }\r\n      return res.status(200).json({\r\n        message: 'Redflags records retrieved',\r\n        records: rows,\r\n        Total: rowCount });\r\n    } catch (error) {\r\n      // console.log(error);\r\n      return res.json(error);\r\n    }\r\n  },\r\n\r\n  async getRedflag(req, res) {\r\n    const text = `SELECT * FROM records WHERE id = $1 AND type = 'Redflag'`;\r\n    try {\r\n      const { rows } = await dBase.query(text, [req.params.id]);\r\n      if (!rows[0]) {\r\n        return res.status(404).json({ message: 'Redflag record not found' });\r\n      }\r\n      return res.status(200).json({\r\n        message: 'Redflag record retrieved',\r\n        records: rows[0] });\r\n    } catch (error) {\r\n      return res.json(error);\r\n    }\r\n  },\r\n\r\n  async updateRedflagComment(req, res) {\r\n    const findOneQuery = `SELECT * FROM records WHERE id = $1  AND type = 'Redflag'`;\r\n    const updateOneQuery = `UPDATE records\r\n    SET comment = $1\r\n    WHERE id = $2`;\r\n    try {\r\n      const { rows } = await dBase.query(findOneQuery, [req.params.id]);\r\n      if (!rows[0]) {\r\n        return res.status(404).json({ message: 'Redflag record not found!' });\r\n      }\r\n      const values = [\r\n        req.body.comment || rows[0].comment,\r\n        req.params.id,\r\n      ];\r\n      const response = await dBase.query(updateOneQuery, values);\r\n      return res.status(201).json({\r\n        message: 'Redflag comment updated successfully!',\r\n        records: response.rows[0] });\r\n    } catch (error) {\r\n      return res.json(error);\r\n    }\r\n  },\r\n\r\n  async updateRedflagLocation(req, res) {\r\n    const findOneQuery = `SELECT * FROM records WHERE id = $1 AND type = 'Redflag'`;\r\n    const updateOneQuery = `UPDATE records\r\n    SET location = $1\r\n    WHERE id = $2`;\r\n    try {\r\n      const { rows } = await dBase.query(findOneQuery, [req.params.id]);\r\n      if (!rows[0]) {\r\n        return res.status(404).json({ message: 'Redflag record not found' });\r\n      }\r\n      const values = [\r\n        req.body.location || rows[0].location,\r\n        req.params.id,\r\n      ];\r\n      const response = await dBase.query(updateOneQuery, values);\r\n      return res.status(201).json({\r\n        message: 'Redflag location successfully updated!',\r\n        records: response.rows[0] });\r\n    } catch (error) {\r\n      return res.json(error);\r\n    }\r\n  },\r\n\r\n  async deleteRedflag(req, res) {\r\n    const deleteQuery = 'DELETE FROM records WHERE id = $1 returning *';\r\n    try {\r\n      const { rows } = await dBase.query(deleteQuery, [req.params.id]);\r\n      if (!rows[0]) {\r\n        return res.status(404).json({ message: 'Redflag record not found' });\r\n      }\r\n      return res.status(200).json({ message: 'Redflag record deleted successfully' });\r\n    } catch (error) {\r\n      return res.json(error);\r\n    }\r\n  },\r\n};\r\n\r\nexport default RedFlags;\r\n"]}