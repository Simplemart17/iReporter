{"version":3,"sources":["../../app/controllers/intervention.js"],"names":["Intervention","createIntervention","req","res","text","values","body","title","user","id","type","location","images","videos","comment","status","json","error","dBase","query","rows","message","records","getAllIntervention","findAllQuery","rowCount","Total","getIntervention","params","updateInterventionComment","findOneQuery","updateOneQuery","response","updateInterventionLocation","deleteIntervention","deleteQuery"],"mappings":"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","file":"intervention.js","sourcesContent":["import dBase from '../models/query';\r\n\r\nconst Intervention = {\r\n  async createIntervention(req, res) {\r\n    const text = `INSERT INTO\r\n    records (title, createdBy, type, location, status, images, videos, comment)\r\n    VALUES($1, $2, $3, $4, $5, $6, $7, $8)\r\n    returning *`;\r\n    const values = [\r\n      req.body.title,\r\n      req.user.id,\r\n      req.body.type,\r\n      req.body.location,\r\n      'Draft',\r\n      req.body.images,\r\n      req.body.videos,\r\n      req.body.comment,\r\n    ];\r\n    try {\r\n      if (req.body.type !== 'Intervention') {\r\n        return res.status(400).json({error: 'Select a valid record type'});\r\n      }\r\n      const { rows } = await dBase.query(text, values);\r\n      return res.status(201).json({\r\n        message: 'Intervention record created',\r\n        records: rows[0] });\r\n    } catch (error) {\r\n      // console.log(error);\r\n      return res.json(error);\r\n    }\r\n  },\r\n\r\n  async getAllIntervention(req, res) {\r\n    const findAllQuery = `SELECT * FROM records WHERE records.type = 'Intervention' AND createdBy = $1`;\r\n    try {\r\n      const { rows, rowCount } = await dBase.query(findAllQuery, [req.user.id]);\r\n      if (!rows[0]) {\r\n        return res.status(404).json({\r\n          message: 'No intervention record found'\r\n        });\r\n      }\r\n      return res.status(200).json({\r\n        message: 'Intervention records retrieved',\r\n        records: rows,\r\n        Total: rowCount });\r\n    } catch (error) {\r\n      // console.log(error);\r\n      return res.json(error);\r\n    }\r\n  },\r\n\r\n  async getIntervention(req, res) {\r\n    const text = `SELECT * FROM records WHERE id = $1, createdBy = $2 AND type = 'Intervention'`;\r\n    try {\r\n      const { rows } = await dBase.query(text, [req.params.id, req.user.id]);\r\n      if (!rows[0]) {\r\n        return res.status(404).json({ message: 'Intervention record not found' });\r\n      }\r\n      return res.status(200).json({\r\n        message: 'Intervention record retrieved',\r\n        records: rows[0] });\r\n    } catch (error) {\r\n      return res.json(error);\r\n    }\r\n  },\r\n\r\n  async updateInterventionComment(req, res) {\r\n    const findOneQuery = `SELECT * FROM records WHERE id = $1, createdBy = $2 AND type = 'Intervention'`;\r\n    const updateOneQuery = `UPDATE records\r\n    SET comment = $1\r\n    WHERE id = $2 AND createdBy = $3 returning *`;\r\n    try {\r\n      const { rows } = await dBase.query(findOneQuery, [req.params.id, req.user.id]);\r\n      if (!rows[0]) {\r\n        return res.status(404).json({ message: 'Intervention record not found!' });\r\n      }\r\n      const values = [\r\n        req.body.comment || rows[0].comment,\r\n        req.params.id,\r\n        req.user.id\r\n      ];\r\n      const response = await dBase.query(updateOneQuery, values);\r\n      return res.status(201).json({\r\n        message: 'Intervention comment updated successfully!',\r\n        records: response.rows[0] });\r\n    } catch (error) {\r\n      return res.json(error);\r\n    }\r\n  },\r\n\r\n  async updateInterventionLocation(req, res) {\r\n    const findOneQuery = `SELECT * FROM records WHERE id = $1, createdBy = $2 AND type = 'Intervention'`;\r\n    const updateOneQuery = `UPDATE records\r\n    SET location = $1\r\n    WHERE id = $2 AND createdBy = $2 returning *`;\r\n    try {\r\n      const { rows } = await dBase.query(findOneQuery, [req.params.id], req.user.id);\r\n      if (!rows[0]) {\r\n        return res.status(404).json({ message: 'Intervention record not found' });\r\n      }\r\n      const values = [\r\n        req.body.location || rows[0].location,\r\n        req.params.id,\r\n        req.user.id\r\n      ];\r\n      const response = await dBase.query(updateOneQuery, values);\r\n      return res.status(201).json({\r\n        message: 'Intervention location successfully updated!',\r\n        records: response.rows[0] });\r\n    } catch (error) {\r\n      return res.json(error);\r\n    }\r\n  },\r\n\r\n  async deleteIntervention(req, res) {\r\n    const deleteQuery = 'DELETE FROM records WHERE id = $1 AND createdBy = $2 returning *';\r\n    try {\r\n      const { rows } = await dBase.query(deleteQuery, [req.params.id, req.user.id]);\r\n      if (!rows[0]) {\r\n        return res.status(404).json({ message: 'Intervention record not found' });\r\n      }\r\n      return res.status(200).json({ message: 'Intervention record deleted successfully' });\r\n    } catch (error) {\r\n      return res.json(error);\r\n    }\r\n  },\r\n};\r\n\r\nexport default Intervention;\r\n"]}