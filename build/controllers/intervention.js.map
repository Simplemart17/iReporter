{"version":3,"sources":["../../app/controllers/intervention.js"],"names":["Intervention","createIntervention","req","res","text","values","body","title","createdBy","type","location","status","Images","Videos","comment","dBase","query","rows","send","message","records","error","console","log","getAllIntervention","findAllQuery","rowCount","Total","getIntervention","params","id","updateInterventionComment","findOneQuery","updateOneQuery","response","updateInterventionLocation","deleteIntervention","deleteQuery"],"mappings":"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","file":"intervention.js","sourcesContent":["import uuidv4 from 'uuid/v4';\nimport dBase from '../models/query';\n\nconst Intervention = {\n  async createIntervention(req, res) {\n    const text = `INSERT INTO\n    records (id, title, createdBy, type, location, status, Images, Videos, comment)\n    VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9)\n    returning *`;\n    const values = [\n      uuidv4(),\n      req.body.title,\n      req.body.createdBy,\n      req.body.type,\n      req.body.location,\n      req.body.status,\n      req.body.Images,\n      req.body.Videos,\n      req.body.comment,\n    ];\n    try {\n      const { rows } = await dBase.query(text, values);\n      return res.status(201).send({\n        status: 201,\n        message: 'Intervention record created',\n        records: rows[0] });\n    } catch (error) {\n      console.log(error);\n      return res.send(error);\n    }\n  },\n\n  async getAllIntervention(req, res) {\n    const findAllQuery = `SELECT * FROM records WHERE records.type = 'Intervention'`;\n    try {\n      const { rows, rowCount } = await dBase.query(findAllQuery);\n      return res.status(200).send({\n        status: 200,\n        message: 'Intervention records retrieved',\n        records: rows,\n        Total: rowCount });\n    } catch (error) {\n      // console.log(error);\n      return res.send(error);\n    }\n  },\n\n  async getIntervention(req, res) {\n    const text = 'SELECT * FROM records WHERE id = $1';\n    try {\n      const { rows } = await dBase.query(text, [req.params.id]);\n      if (!rows[0]) {\n        return res.status(404).send({ message: 'Intervention record not found' });\n      }\n      return res.status(200).send({\n        status: 200,\n        message: 'Intervention record retrieved',\n        records: rows[0] });\n    } catch (error) {\n      return res.send(error);\n    }\n  },\n\n  async updateInterventionComment(req, res) {\n    const findOneQuery = 'SELECT * FROM records WHERE id = $1';\n    const updateOneQuery = `UPDATE records\n    SET comment = $1\n    WHERE id = $2 returning *`;\n    try {\n      const { rows } = await dBase.query(findOneQuery, [req.params.id]);\n      if (!rows[0]) {\n        return res.status(404).send({ message: 'Intervention record not found' });\n      }\n      const values = [\n        req.body.comment || rows[0].comment,\n        req.params.id,\n      ];\n      const response = await dBase.query(updateOneQuery, values);\n      return res.status(200).send({\n        status: 200,\n        message: 'Intervention comment updated successfully!',\n        records: response.rows[0] });\n    } catch (error) {\n      return res.send(error);\n    }\n  },\n\n  async updateInterventionLocation(req, res) {\n    const findOneQuery = 'SELECT * FROM records WHERE id = $1';\n    const updateOneQuery = `UPDATE records\n    SET location = $1\n    WHERE id = $2 returning *`;\n    try {\n      const { rows } = await dBase.query(findOneQuery, [req.params.id]);\n      if (!rows[0]) {\n        return res.status(404).send({ message: 'Intervention record not found' });\n      }\n      const values = [\n        req.body.location || rows[0].location,\n        req.params.id,\n      ];\n      const response = await dBase.query(updateOneQuery, values);\n      return res.status(200).send({\n        status: 201,\n        message: 'Intervention location successfully updated!',\n        records: response.rows[0] });\n    } catch (error) {\n      return res.send(error);\n    }\n  },\n\n  async deleteIntervention(req, res) {\n    const deleteQuery = 'DELETE FROM records WHERE id = $1 returning *';\n    try {\n      const { rows } = await dBase.query(deleteQuery, [req.params.id]);\n      if (!rows[0]) {\n        return res.status(404).send({ message: 'Intervention record not found' });\n      }\n      return res.status(200).send({ message: 'Intervention record deleted successfully' });\n    } catch (error) {\n      return res.send(error);\n    }\n  },\n};\n\nexport default Intervention;\n"]}